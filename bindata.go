// Code generated by go-bindata.
// sources:
// viewer.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _viewerHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x56\x6d\x6f\xdc\x36\x0c\xfe\xde\x5f\xc1\xaa\x05\x7a\xc9\x6a\xab\xb7\xac\x58\x96\x9c\x03\x74\x5d\xb1\x15\xe8\xcb\x50\x64\x6f\x28\x8a\x41\x67\xd1\xb6\x52\xd9\x72\x25\xf9\xd2\x43\x90\xff\x3e\xca\x2f\x77\xb6\x9b\x74\x68\x81\xed\xc3\xe1\x44\x1e\xf9\x88\xe4\x43\x52\xb7\xba\xfb\xd3\xeb\xa7\xe7\x7f\xfd\xfa\x0c\x0a\x5f\xea\xb3\x3b\xab\xf0\x05\x5a\x54\x79\xc2\xb0\x62\x67\x77\x00\x56\x05\x0a\x19\x0e\x74\x2c\xd1\x0b\x48\x0b\x61\x1d\xfa\x84\x35\x3e\x8b\x8e\xd9\xf8\xa7\xc2\xfb\x3a\xc2\x0f\x8d\xda\x24\xec\xcf\xe8\xb7\x27\xd1\x53\x53\xd6\xc2\xab\xb5\x46\x06\xa9\xa9\x3c\x56\xe4\xf7\xfc\x59\x82\x32\xc7\x89\x67\x25\x4a\x4c\xd8\x46\xe1\x65\x6d\xac\x1f\x19\x5f\x2a\xe9\x8b\x44\xe2\x46\xa5\x18\xb5\xc2\x43\x50\x95\xf2\x4a\xe8\xc8\xa5\x42\x63\xb2\x1c\x80\xee\x46\x11\x9c\x17\x08\x62\x6d\x36\x08\x47\xd0\x02\x7b\x91\x3b\x38\x2c\x1b\xe7\x0f\x09\xb4\x44\xc8\x94\x75\x9e\x20\xc0\x93\x69\xc8\xed\x14\x44\xb5\x05\x43\xa2\x6d\xe5\xe1\x6e\x08\x4e\x9d\xcf\xa1\xc8\x3c\xda\xc3\xe0\xe2\xb0\x83\x8c\xa2\xfe\x56\xaf\xbc\xc6\xb3\x97\xc2\xbe\x97\xe6\xb2\x8a\x7e\xa7\x14\x56\xbc\x53\xde\xd9\xc7\xf5\xa3\x31\xde\x79\x2b\xea\xbd\xa3\x56\xd5\x7b\xb0\xa8\x13\xe6\xfc\x56\xa3\x2b\x10\x29\xf1\xc2\x62\x96\x30\xce\x53\x59\xc5\x17\x4e\xa2\x56\x1b\x1b\x57\xe8\xf9\x7a\x40\xe0\x47\xf1\x51\xfc\x98\xa7\xce\xed\x75\x71\xa9\xaa\x98\x34\xec\xeb\xb0\x0b\x95\x17\x9a\x3e\x9e\xd4\xfc\x38\x3e\x8e\x1f\xf1\xce\x8f\x4b\xcc\x44\xa3\xfd\x7f\x86\x9f\x2b\x5f\x34\xeb\x11\xfc\xbe\x64\xbf\x9c\xbf\x7c\xf1\x18\x5c\xa1\x4a\x22\x48\xc2\x1b\x74\xb5\xa9\x24\x21\x40\x66\x2c\x3c\x7f\x76\x0c\xae\xa9\x43\xb7\x80\xc9\x7a\x63\xd4\x58\x12\x73\xae\x75\x28\x51\x2a\x01\x1f\x1a\xb4\x0a\x47\x7c\x05\xe8\x3f\x9e\xbc\x79\xf5\xfc\xd5\xcf\x27\x63\x50\x69\xd0\x55\x0f\x3c\x5c\x1a\xfb\x1e\x54\x06\x5b\xd3\x40\xe8\xc7\xb6\x4f\x6a\x91\x23\x49\x82\xba\x47\xe3\x09\xe7\x13\xb8\xb7\x64\xad\x3d\x45\x04\x3f\xbc\xeb\xb4\xa4\x77\xa9\x55\xb5\x07\x67\xd3\x84\x85\xb1\x70\xe4\x65\x9c\x8b\x4b\xf1\x31\x94\x87\xda\x8a\x87\x59\x7b\x4c\xf9\x6d\x88\xd1\xef\xe3\x6f\xf7\x72\x5b\x8e\x0b\xaa\xc6\x8a\x77\x30\x5f\x82\x6a\xbb\x94\xf8\x32\xfe\x8e\x30\x7b\xe9\x16\xc4\xd5\xdd\xb7\x58\x49\x95\xbd\xeb\xd2\x59\xf1\x61\xd6\x57\x6b\x23\xb7\xbd\x4d\x25\x36\x90\x6a\xe1\x5c\xc2\xe8\xb8\x16\x16\xba\xaf\xa8\xef\x0d\xb6\x8b\x4e\xaa\x9d\x65\x98\x21\xa1\x2a\xb4\x51\xa6\x1b\x25\x77\x36\xc3\x38\xd8\xc0\x50\xf8\x78\x93\xe7\x1a\x21\x47\x0f\xb9\x35\x4d\x8d\xb2\xa5\x77\x8d\x9e\x26\x0e\x4a\xb3\xa6\x82\x83\x54\xae\xd6\x62\xbb\xab\xfa\xfc\xb6\x3e\xa0\x10\x3d\xda\xd1\x5d\x21\x91\xc6\x7b\x43\xc3\xbe\xad\x69\xbf\x74\x02\x9b\xb9\xf5\x21\xa4\x46\x6b\x51\x3b\x94\x0c\xa4\xf0\xa2\x57\x87\x54\x3a\xfd\xa0\x16\x36\x0f\xdb\xef\xde\xda\x45\xf8\x51\x94\xb5\xc6\xa8\x07\x1a\x2c\xa3\x25\x03\x61\x95\xa0\xdf\x6b\xca\x11\x65\xc2\x32\xa1\x1d\x4e\x22\x0b\x6c\xd2\xaf\x43\x2c\xce\x46\xa6\xd2\x5b\x76\x76\xde\x45\x43\x90\x2a\xa7\xd5\x69\x2a\xa2\x8c\xec\x3e\xe3\xaa\xa8\xd8\x11\xdd\xdf\xb2\xfb\xbf\x98\xae\x78\x57\xc9\x89\x4e\xcc\xca\xba\x0e\x1c\x0f\x4b\xe1\x1e\x9b\xae\x48\xb4\x2b\x2e\x46\x64\x72\x62\xb3\x1f\xfe\x5d\x93\x3c\xa5\x72\x62\xea\xdb\x01\x0c\x4d\x18\x96\x8e\x7b\x18\xda\xa3\xa4\xaf\xd0\x3c\xdd\xd2\x1e\xf6\x75\xe8\x9b\x96\x34\x55\xe5\xb7\xb6\xca\xc0\x11\xcc\x38\x63\xa0\x88\xa6\xcf\x72\x3a\xc9\x76\xda\x7d\x03\xda\xe8\x68\xc3\xbe\x9b\x33\x5e\xcf\x5b\x0f\x3f\xce\x6d\x00\x42\x7d\x28\x85\x93\x50\xd2\x7e\xa5\x5e\x5d\x81\xaa\x33\xf7\x77\x21\x5c\x01\xd7\xd7\xec\x6c\xa6\x98\x14\xb3\x2b\x68\x3d\x25\xac\xad\xef\x54\x6c\x8b\xcc\xe3\x59\xa2\xa3\xca\x4d\xcc\x66\x13\xbd\xdf\x80\x9c\x00\x86\xbd\x7d\xd3\x06\xb8\x71\x3f\x58\x73\xc9\x6e\x25\x28\x2a\x65\xb4\x7c\x04\xfd\xc9\x64\x19\xfd\xdd\x08\x33\x15\x18\xea\xc9\x9e\x14\xed\x85\x11\x92\x0a\x16\xc7\xf1\xbc\xa1\x3e\x11\xc6\x8d\x36\xd9\xa6\x37\xbc\x5a\x17\xe1\xed\xd8\xd2\x22\x5d\x2e\xe3\xa3\x5e\xba\x6d\x91\xfe\x0b\xd4\xfc\xf1\xbe\x98\xbf\xdd\x5f\x0e\x59\xd2\x38\xa1\xe4\x8f\x5a\xbc\x4e\xf8\x4a\xa4\x1b\x5e\xe7\xbd\xea\x53\xc8\x31\xe6\x50\xe1\xfb\x8b\xac\xa9\xd2\xb0\xad\x16\x07\x57\x3b\x12\x36\xf4\x56\xec\xbb\x34\x01\x36\x6f\xe3\xd3\xfd\xc4\xf7\x19\x10\xd3\xaf\xeb\x80\xe3\x16\x57\x23\x86\x77\xf1\x9c\xc0\x70\x11\x2c\x52\x23\xf1\x00\xae\x26\x7d\x6f\xd1\x37\xb6\x82\x42\x5f\xb8\x78\xe7\xf4\xa4\xf1\xa6\xb3\x8e\x37\x42\x37\x78\x3a\x72\xb9\xde\x9d\xaf\x0f\x46\xe1\xdc\x8f\x69\xc9\x2f\x18\x97\x26\x6d\xc2\x5f\x0a\xce\xe0\x9b\x7d\xec\x0f\x77\x51\x2c\xc2\x9b\x70\x30\x8e\xe1\xfe\xe2\xc1\xbd\xbe\x49\x1f\x1c\xc4\xe1\x4d\x5f\x74\xb9\x75\xa6\x07\xa7\x93\x0b\xa7\xa7\x31\x6f\xb4\x63\xdb\x37\x78\xc5\xbb\xbf\xe6\xff\x04\x00\x00\xff\xff\x0b\x80\xc6\xc1\xab\x0b\x00\x00")

func viewerHtmlBytes() ([]byte, error) {
	return bindataRead(
		_viewerHtml,
		"viewer.html",
	)
}

func viewerHtml() (*asset, error) {
	bytes, err := viewerHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "viewer.html", size: 2987, mode: os.FileMode(420), modTime: time.Unix(1443015811, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"viewer.html": viewerHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"viewer.html": &bintree{viewerHtml, map[string]*bintree{
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

